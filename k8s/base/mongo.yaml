apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: voting-app
  labels:
    app: mongodb
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
      tier: database
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DATABASE_NAME
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: voting-app
  labels:
    app: mongodb
    tier: database
spec:
  selector:
    app: mongodb
    tier: database
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: voting-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: voting-app
data:
  init.js: |
    // MongoDB initialization script for voting app
    print("Starting voting app database initialization...");
    
    db = db.getSiblingDB('voting_app');
    
    db.createCollection('polls');
    db.createCollection('votes');
    
    db.polls.createIndex({ "id": 1 }, { unique: true });
    db.polls.createIndex({ "active": 1 });
    db.polls.createIndex({ "created_at": 1 });
    
    db.votes.createIndex({ "poll_id": 1, "voter_ip": 1 }, { unique: true });
    db.votes.createIndex({ "poll_id": 1 });
    db.votes.createIndex({ "timestamp": 1 });
    
    const samplePoll = {
      id: "sample-poll-001",
      title: "What's your favorite cloud platform?",
      description: "Vote for your preferred cloud platform for deploying applications",
      options: [
        { id: "option-001", title: "Azure", description: "Microsoft's cloud platform", votes: 0 },
        { id: "option-002", title: "AWS", description: "Amazon Web Services", votes: 0 },
        { id: "option-003", title: "Google Cloud", description: "Google's cloud platform", votes: 0 },
        { id: "option-004", title: "Digital Ocean", description: "Simple cloud computing", votes: 0 }
      ],
      created_at: new Date(),
      active: true
    };
    
    try {
      db.polls.insertOne(samplePoll);
      print("Sample poll inserted successfully");
    } catch (error) {
      print("Error inserting sample poll: " + error);
    }
    
    print("Database initialization completed successfully!");